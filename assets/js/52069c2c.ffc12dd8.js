"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[60],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return f}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},l={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),f=a,m=d["".concat(c,".").concat(f)]||d[f]||l[f]||o;return t?n.createElement(m,i(i({ref:r},u),{},{components:t})):n.createElement(m,i({ref:r},u))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5480:function(e,r,t){t.r(r),t.d(r,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return l}});var n=t(3117),a=t(102),o=(t(7294),t(3905)),i=["components"],s={title:"Backpressure",sidebar_label:"Backpressure",custom_edit_url:"https://github.com/scalapb/zio-grpc/edit/master/docs/backpressure.md"},c=void 0,p={unversionedId:"backpressure",id:"backpressure",title:"Backpressure",description:"From version 0.5.3 onwards, zio-grpc provides backpressure support for server",source:"@site/../zio-grpc-docs/target/mdoc/backpressure.md",sourceDirName:".",slug:"/backpressure",permalink:"/zio-grpc/docs/backpressure",draft:!1,editUrl:"https://github.com/scalapb/zio-grpc/edit/master/docs/backpressure.md",tags:[],version:"current",frontMatter:{title:"Backpressure",sidebar_label:"Backpressure",custom_edit_url:"https://github.com/scalapb/zio-grpc/edit/master/docs/backpressure.md"}},u={},l=[],d={toc:l};function f(e){var r=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"From version 0.5.3 onwards, zio-grpc provides backpressure support for server\nstreaming RPCs. In case the call is not capable to sending additional messages\nwithout buffering (as determined by ",(0,o.kt)("a",{parentName:"p",href:"https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerCall.html#isReady%5D"},(0,o.kt)("inlineCode",{parentName:"a"},"ServerCall.isReady")),"), sending messages from the queue associated with server response ",(0,o.kt)("inlineCode",{parentName:"p"},"Stream")," will stop. The default size of this queue is ",(0,o.kt)("inlineCode",{parentName:"p"},"16"),",  and can be configured by setting the system property ",(0,o.kt)("inlineCode",{parentName:"p"},"zio_grpc.backpressure_queue_size")," or the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO_GRPC_BACKPRESSURE_QUEUE_SIZE"),". Setting the value to ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," or a negative number will disable buffering but keep the back pressure at the chunk level (",(0,o.kt)("inlineCode",{parentName:"p"},"isReady")," will be checked after processing each chunk instead of each message)."))}f.isMDXComponent=!0}}]);