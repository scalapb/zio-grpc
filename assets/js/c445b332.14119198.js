"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[869],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3713:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(3117),i=n(102),r=(n(7294),n(3905)),o=["components"],s={title:"ZIO gRPC and Deadlines",description:"Setting deadlines with ZIO gRPC",custom_edit_url:"https://github.com/scalapb/zio-grpc/edit/master/docs/deadlines.md"},l=void 0,c={unversionedId:"deadlines",id:"deadlines",title:"ZIO gRPC and Deadlines",description:"Setting deadlines with ZIO gRPC",source:"@site/../zio-grpc-docs/target/mdoc/deadlines.md",sourceDirName:".",slug:"/deadlines",permalink:"/zio-grpc/docs/deadlines",draft:!1,editUrl:"https://github.com/scalapb/zio-grpc/edit/master/docs/deadlines.md",tags:[],version:"current",frontMatter:{title:"ZIO gRPC and Deadlines",description:"Setting deadlines with ZIO gRPC",custom_edit_url:"https://github.com/scalapb/zio-grpc/edit/master/docs/deadlines.md"},sidebar:"someSidebar",previous:{title:"Decorating services",permalink:"/zio-grpc/docs/decorating"},next:{title:"Scala.js",permalink:"/zio-grpc/docs/scala.js"}},d={},p=[{value:"Setting timeout for all requests",id:"setting-timeout-for-all-requests",level:2},{value:"Setting timeout for each request",id:"setting-timeout-for-each-request",level:2}],u={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When you use a gRPC it is ",(0,r.kt)("a",{parentName:"p",href:"https://grpc.io/blog/deadlines/"},"a very important to set deadlines"),".\nIn gRPC, deadlines are absolute timestamps that tell our system when the response of an RPC call is\nno longer needed. The deadline is sent to the server, and the computation is automatically interrupted\nwhen the deadline is exceeded. The client call automatically ends with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Status.DEADLINE_EXCEEDED")," error."),(0,r.kt)("p",null,"When you don't specify a deadline, client requests never timeout. All in-flight requests take\nresources on the server, and possibly upstream servers, which can ultimately hurt latency or crash\nthe entire process."),(0,r.kt)("p",null,"In ZIO gRPC you can easily set deadlines (absolute timestamps), or timeouts which are relative to\nthe time the outbound call is made."),(0,r.kt)("h2",{id:"setting-timeout-for-all-requests"},"Setting timeout for all requests"),(0,r.kt)("p",null,"To set the same timeout for all requests, it is possible to provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"ClientTransform")," when constructing the\nclient. This transformation is invoked before each request, and can determine the deadline relative to the\nsystem clock at the time the effect is executed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import myexample.testservice.ZioTestservice.ServiceNameClient\nimport myexample.testservice.{Request, Response}\nimport scalapb.zio_grpc.{ZManagedChannel, ClientTransform}\nimport io.grpc.ManagedChannelBuilder\nimport zio._\nimport zio.Console._\n\nval channel = ZManagedChannel(\n  ManagedChannelBuilder\n    .forAddress("localhost", 8980)\n    .usePlaintext()\n)\n// channel: ZManagedChannel = DynamicNoBox(\n//   trace = "scalapb.zio_grpc.ZManagedChannel.apply(ZManagedChannel.scala:13)",\n//   update = 1L,\n//   f = zio.ZIO$$Lambda$15024/0x00000001040c5840@23008b27\n// )\n\n// create layer:\nval clientLayer = ServiceNameClient.live(\n  channel,\n  ClientTransform.withTimeoutMillis(3000))\n// clientLayer: ZLayer[Any, Throwable, ServiceNameClient] = Fold(\n//   self = Suspend(\n//     self = zio.ZLayer$ScopedPartiallyApplied$$$Lambda$15002/0x00000001040a3c40@21d55cf5\n//   ),\n//   failure = zio.ZLayer$$Lambda$15032/0x00000001040c0840@4aa03463,\n//   success = zio.ZLayer$$Lambda$15030/0x00000001040c2040@287f580c\n// )\n\nval myAppLogicNeedsEnv = for {\n  // use layer through accessor methods:\n  res <- ServiceNameClient.unary(Request())\n  _ <- printLine(res.toString)\n} yield ()\n// myAppLogicNeedsEnv: ZIO[ServiceNameClient, Exception, Unit] = FlatMap(\n//   trace = "repl.MdocSession.MdocApp.myAppLogicNeedsEnv(deadlines.md:40)",\n//   first = Stateful(\n//     trace = "myexample.testservice.ZioTestservice.ServiceNameAccessors.unary(ZioTestservice.scala:77)",\n//     onState = zio.FiberRef$unsafe$$anon$2$$Lambda$14954/0x0000000104079040@1adec348\n//   ),\n//   successK = <function1>\n// )\n')),(0,r.kt)("h2",{id:"setting-timeout-for-each-request"},"Setting timeout for each request"),(0,r.kt)("p",null,"As in the previous example, assuming there is a client in the environment, we can set the timeout\nfor each request like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'ServiceNameClient.withTimeoutMillis(3000).unary(Request())\n// res0: ZIO[ServiceNameClient, io.grpc.StatusException, Response] = Stateful(\n//   trace = "myexample.testservice.ZioTestservice.ServiceNameAccessors.unary(ZioTestservice.scala:77)",\n//   onState = zio.FiberRef$unsafe$$anon$2$$Lambda$14954/0x0000000104079040@492a27b9\n// )\n')),(0,r.kt)("p",null,"Clients provide (through the ",(0,r.kt)("inlineCode",{parentName:"p"},"GeneratedClient")," trait) a number of methods that makes it possible to\nspecify a deadline or a timeout for each request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"// Provide a new absolute deadline\ndef withDeadline(deadline: Deadline): Service\n\n// Sets a new timeout for this service\ndef withTimeout(duration: zio.duration.Duration): Service\n\n// Sets a new timeout in millis\ndef withTimeoutMillis(millis: Long): Service\n\n// Replace the call options with the provided call options\ndef withCallOptions(callOptions: CallOptions): Service\n\n// update the CallOptions for this service\ndef mapCallOptions(f: CallOptions => CallOptions): Service\n\n// update the request Metadata for this service\ndef mapMetadataZIO(f: SafeMetadata => UIO[SafeMetadata]): Service\n")),(0,r.kt)("p",null,"If you are using a client instance, the above methods are available to provide you with a new\nclient that has a modified ",(0,r.kt)("inlineCode",{parentName:"p"},"CallOptions")," effect. Making the copy of those clients is cheap and can\nbe safely done for each individual call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val clientScoped = ServiceNameClient.scoped(channel)\n// clientScoped: ZIO[Scope, Throwable, ServiceNameClient] = FlatMap(\n//   trace = "myexample.testservice.ZioTestservice.ServiceNameClient.scoped(ZioTestservice.scala:109)",\n//   first = FlatMap(\n//     trace = "myexample.testservice.ZioTestservice.ServiceNameClientWithResponseMetadata.scoped(ZioTestservice.scala:191)",\n//     first = DynamicNoBox(\n//       trace = "scalapb.zio_grpc.ZManagedChannel.apply(ZManagedChannel.scala:13)",\n//       update = 1L,\n//       f = zio.ZIO$$Lambda$15024/0x00000001040c5840@23008b27\n//     ),\n//     successK = zio.ZIO$$Lambda$15039/0x0000000104103840@28584b7a\n//   ),\n//   successK = zio.ZIO$$Lambda$15039/0x0000000104103840@55f1cc9e\n// )\n\nval myAppLogic = ZIO.scoped {\n  clientScoped.flatMap { client =>\n    for {\n      res <- client\n               .withTimeoutMillis(3000).unary(Request())\n    } yield res\n  }\n}\n// myAppLogic: ZIO[Any, Throwable, Response] = FlatMap(\n//   trace = "repl.MdocSession.MdocApp.myAppLogic(deadlines.md:57)",\n//   first = FlatMap(\n//     trace = "repl.MdocSession.MdocApp.myAppLogic(deadlines.md:57)",\n//     first = Sync(\n//       trace = "repl.MdocSession.MdocApp.myAppLogic(deadlines.md:57)",\n//       eval = zio.Scope$ReleaseMap$$$Lambda$15048/0x0000000104110840@65061214\n//     ),\n//     successK = zio.ZIO$$Lambda$15039/0x0000000104103840@34a6a038\n//   ),\n//   successK = zio.ZIO$ScopedPartiallyApplied$$$Lambda$15050/0x0000000104112040@2d42afa0\n// )\n')))}m.isMDXComponent=!0}}]);